{"mappings":"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","sources":["Desktop/Web development/Tetris/app.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    const grid = document.querySelector('.grid')\r\n    let squares = Array.from(document.querySelectorAll('.grid div'))\r\n    const scoreDisplay = document.querySelector('#score')\r\n    const startBtn = document.querySelector('#start-button')\r\n    const width = 10\r\n    let nextRandom = 0\r\n    let timerId\r\n    let score = 0\r\n    const colour = [\r\n        'orange',\r\n        'red',\r\n        'purple',\r\n        'green',\r\n        'blue'\r\n    ]\r\n\r\n    // The tetrominoes\r\n    const lTetromino = [\r\n        [1, width+1, width*2+1, 2],\r\n        [width, width+1, width+2, width*2+2],\r\n        [1, width+1, width*2+1, width*2],\r\n        [width, width*2, width*2+1, width*2+2]\r\n    ]\r\n\r\n    const zTetromino = [\r\n        [width*2, width*2+1, width+1, width+2],\r\n        [0, width, width+1, width*2+1],\r\n        [width*2, width*2+1, width+1, width+2],\r\n        [0, width, width+1, width*2+1],\r\n    ]\r\n\r\n    const tTetromino = [\r\n        [width, 1, width+1, width+2],\r\n        [1, width+1, width*2+1, width+2],\r\n        [width,width+1, width+2, width*2+1],\r\n        [width, 1, width+1, width*2+1]\r\n    ]\r\n\r\n    const oTetromino = [\r\n        [0, 1, width, width+1],\r\n        [0, 1, width, width+1],\r\n        [0, 1, width, width+1],\r\n        [0, 1, width, width+1]\r\n    ]\r\n\r\n    const iTetromino = [\r\n        [1, width+1, width*2+1, width*3+1],\r\n        [width, width+1, width+2, width+3],\r\n        [1, width+1, width*2+1, width*3+1],\r\n        [width, width+1, width+2, width+3]\r\n    ]\r\n\r\n    const theTetrominoes = [lTetromino, zTetromino, tTetromino, oTetromino, iTetromino]\r\n\r\n    let currentPosition = 4\r\n    let currentRotation = 0\r\n\r\n    //Select tetrominoes randomly and its first rotation\r\n    let random = Math.floor(Math.random()*theTetrominoes.length)\r\n    let current = theTetrominoes[random][currentRotation]\r\n\r\n    //draw the Tetromino\r\n    function draw() {\r\n        current.forEach(index => {\r\n          squares[currentPosition + index].classList.add('tetromino')\r\n          squares[currentPosition + index].style.backgroundColor = colour[random]\r\n        })\r\n    }\r\n\r\n    // undraw the Tetromino\r\n    function undraw() {\r\n        current.forEach(index => {\r\n            squares[currentPosition + index].classList.remove('tetromino')\r\n            squares[currentPosition + index].style.backgroundColor = ''\r\n        })\r\n    }\r\n\r\n    //make the tetromino move down every second\r\n    //timerId = setInterval(moveDown, 1000)\r\n\r\n    //assign function to KeyCodes\r\n    function control(e) {\r\n        if(e.keyCode === 37) {\r\n            moveLeft()\r\n        } else if (e.keyCode === 38) {\r\n            rotate()\r\n        } else if (e.keyCode === 39) {\r\n            moveRight()\r\n        } else if (e.keyCode === 40) {\r\n            moveDown()\r\n        }\r\n    }\r\n\r\n    document.addEventListener('keyup', control)\r\n\r\n    function moveDown() {\r\n        undraw()\r\n        currentPosition += width\r\n        draw()\r\n        freeze()\r\n    }\r\n\r\n    //function freeze\r\n    function freeze() {\r\n        if(current.some(index => squares[currentPosition + index + width].classList.contains('taken'))) {\r\n            current.forEach(index => squares[currentPosition + index].classList.add('taken'))\r\n            //start new tetromino falling\r\n            random = nextRandom\r\n            nextRandom = Math.floor(Math.random() * theTetrominoes.length)\r\n            current = theTetrominoes[random][currentRotation]\r\n            currentPosition = 4\r\n            draw()\r\n            displayShape()\r\n            addScore()\r\n            gameOver()\r\n        }\r\n    }\r\n\r\n    //move the tetromino left, unless is at the edge or there is a blockage\r\n    function moveLeft() {\r\n        undraw()\r\n        const isAtLeftEdge = current.some(index => (currentPosition + index) % width === 0)\r\n\r\n        if (!isAtLeftEdge) {\r\n            currentPosition -= 1\r\n        }\r\n\r\n        if (current.some(index => squares[currentPosition + index].classList.contains('taken'))) { \r\n            currentPosition += 1\r\n        }\r\n\r\n        draw()\r\n    }\r\n\r\n    //move the tetromino right, nless is at the edge or there is a blockage\r\n    function moveRight() {\r\n        undraw()\r\n        const isAtRightEdge = current.some(index => (currentPosition + index + 1) % width === 0)\r\n        \r\n        if(!isAtRightEdge) {\r\n            currentPosition += 1\r\n        }\r\n\r\n        if (current.some(index => squares[currentPosition + index].classList.contains('taken'))) { \r\n            currentPosition -= 1\r\n        }\r\n\r\n        draw()\r\n    }\r\n\r\n    //rotate the tetromino\r\n    function rotate() {\r\n        undraw()\r\n\r\n        currentRotation ++\r\n\r\n        if (currentRotation === current.length) {\r\n            currentRotation = 0\r\n        }\r\n        current = theTetrominoes[random][currentRotation]\r\n\r\n        const isAtRightEdge = current.some(index => (currentPosition + index + 1) % width === 0)\r\n        const isAtLeftEdge = current.some(index => (currentPosition + index) % width === 0)\r\n\r\n        if (isAtLeftEdge && isAtRightEdge) {\r\n            if ((currentPosition % width) > (width/2)) {\r\n                currentPosition -=2\r\n            } else {\r\n                currentPosition += 2\r\n            }\r\n        }\r\n        draw()\r\n    }\r\n\r\n    //show up-next tetromino in mini-grid\r\n    const displaySquares = document.querySelectorAll('.mini-grid div')\r\n    const displayWidth = 4\r\n    let displayIndex = 0\r\n\r\n    //the tetrominos without rotations\r\n    const upNextTetrominoes = [\r\n        [1, displayWidth+1, displayWidth*2+1, 2],\r\n        [displayWidth*2, displayWidth*2+1, displayWidth+1, displayWidth+2],\r\n        [displayWidth, 1, displayWidth+1, displayWidth+2],\r\n        [0, 1, displayWidth, displayWidth+1],\r\n        [1, displayWidth+1, displayWidth*2+1, displayWidth*3+1]\r\n    ]\r\n\r\n    //display the shapes in the mini-grid display\r\n    function displayShape() {\r\n        //remove any trace of a tetromino from the entire grid\r\n        displaySquares.forEach(square => {\r\n            square.classList.remove('tetromino')\r\n            square.style.backgroundColor = ''\r\n        })\r\n        upNextTetrominoes[nextRandom].forEach( index => {\r\n            displaySquares[displayIndex + index].classList.add('tetromino')\r\n            displaySquares[displayIndex + index].style.backgroundColor = colour[nextRandom]\r\n        })\r\n    }\r\n\r\n    //add functionality to the button\r\n    startBtn.addEventListener('click', () => {\r\n        if (timerId) {\r\n            clearInterval(timerId)\r\n            timerId = null\r\n        } else {\r\n            draw()\r\n            timerId = setInterval(moveDown, 1000)\r\n            nextRandom = Math.floor(Math.random()*theTetrominoes.length)\r\n            displayShape()\r\n        }\r\n    })\r\n\r\n    //add score\r\n    function addScore() {\r\n        for (let i = 0; i < 199; i += width) {\r\n            const row = [i, i+1, i+2, i+3, i+4, i+5, i+6, i+7, i+8, i+9]\r\n\r\n            if (row.every( index => squares[index].classList.contains('taken'))) {\r\n                score += 10\r\n                scoreDisplay.innerHTML = score\r\n                row.forEach( index => {\r\n                    squares[index].classList.remove('taken')\r\n                    squares[index].classList.remove('tetromino')\r\n                    squares[index].style.backgroundColor = ''\r\n                })\r\n                const squaresRemoved = squares.splice(i, width)\r\n                squares = squaresRemoved.concat(squares)\r\n                squares.forEach(cell => grid.appendChild(cell))\r\n            }\r\n        } \r\n    }\r\n\r\n    //game over\r\n    function gameOver() {\r\n        if(current.some(index => squares[currentPosition + index].classList.contains('taken'))) {\r\n            scoreDisplay.innerHTML = 'end'\r\n            clearInterval(timerId)\r\n        }\r\n    }\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n     \r\n\r\n})\r\n\r\n\r\n"],"names":[],"version":3,"file":"index.4233c2c7.js.map","sourceRoot":"/__parcel_source_root/"}